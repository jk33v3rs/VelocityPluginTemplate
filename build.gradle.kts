plugins {
    java
    alias(libs.plugins.shadow)
    alias(libs.plugins.runvelocity)
    alias(libs.plugins.blossom)
    alias(libs.plugins.idea.ext)
}

// Root project repositories
repositories {
    maven("https://repo.papermc.io/repository/maven-public/")
    maven("https://m2.dv8tion.net/releases") // JDA
    maven("https://repo.aikar.co/content/groups/aikar/") // ACF
    maven("https://repo.opencollab.dev/main/") // Geyser/Floodgate
    maven("https://jitpack.io") // VaultAPI
    maven("https://nexus.tnemc.net/content/repositories/public/") // TNE
    maven("https://repo.codemc.io/repository/maven-public/") // QuickShop
    mavenCentral()
}

// Root project dependencies (for VeloctopusRising.java in src/main/java)
dependencies {
    implementation(libs.velocity)
    implementation(libs.hikaricp)
    implementation(libs.mariadb)
    implementation(libs.jedis)
    implementation(libs.jda)
    implementation(libs.gson)
    implementation(libs.caffeine)
    implementation(libs.bstats)
    
    // Adventure components for text handling
    implementation(libs.adventure.text)
    implementation(libs.adventure.platform)
    
    // Command framework
    implementation(libs.acf.velocity)
    
    // MC Plugin APIs (compileOnly - plugins will be present on server)
    compileOnly(libs.luckperms)        // LuckPerms for permission management
    compileOnly(libs.geyser)           // Geyser for Bedrock cross-play
    compileOnly(libs.floodgate)        // Floodgate for Bedrock authentication
    compileOnly(libs.vault)            // Vault for economy integration patterns
    compileOnly(libs.tne)              // TheNewEconomy for multi-currency patterns
    compileOnly(libs.quickshop)        // QuickShop for shop system patterns
    
    // Core module dependency
    implementation(project(":core"))
    implementation(project(":api"))
}

// Root project Java configuration
java {
    toolchain.languageVersion.set(JavaLanguageVersion.of(17))
}

// Root project tasks
tasks {
    compileJava {
        options.encoding = Charsets.UTF_8.name()
        options.release.set(17)
    }
    
    shadowJar {
        archiveBaseName.set("VeloctopusRising")
        archiveVersion.set(project.version.toString())
        archiveClassifier.set("")
        
        // Relocate dependencies to avoid conflicts
        relocate("com.google.gson", "io.github.jk33v3rs.veloctopusrising.libs.gson")
        relocate("com.github.benmanes.caffeine", "io.github.jk33v3rs.veloctopusrising.libs.caffeine")
        relocate("redis.clients.jedis", "io.github.jk33v3rs.veloctopusrising.libs.jedis")
        
        minimize()
    }
    
    runVelocity {
        velocityVersion(libs.versions.velocity.get())
    }
    
    clean {
        // Clean all subprojects
        subprojects.forEach { subproject ->
            dependsOn("${subproject.path}:clean")
        }
        // Delete the directory that is generated by the runVelocity plugin
        delete("run")
    }
}

// Blossom configuration for version replacement
configure<me.qoomon.gradle.blossom.BlossomExtension> {
    replaceToken("@version@", project.version.toString())
}

// Apply common configuration to all subprojects
subprojects {
    apply(plugin = "java")
    
    repositories {
        maven("https://repo.papermc.io/repository/maven-public/")
        maven("https://m2.dv8tion.net/releases") // JDA
        maven("https://repo.aikar.co/content/groups/aikar/") // ACF
        mavenCentral()
    }
    
    java.toolchain.languageVersion.set(JavaLanguageVersion.of(17))
    
    // Common dependencies for all modules
    dependencies {
        // API dependency for all implementation modules
        if (project.name != "api") {
            implementation(project(":api"))
        }
        
        // Logging
        implementation("org.slf4j:slf4j-api:2.0.9")
        
        // Annotations
        compileOnly("org.jetbrains:annotations:24.0.1")
        
        // Testing
        testImplementation("org.junit.jupiter:junit-jupiter:5.10.0")
        testImplementation("org.mockito:mockito-core:5.5.0")
    }
    
    tasks.test {
        useJUnitPlatform()
    }
}

// Task to build all modules
tasks.register("buildAll") {
    group = "build"
    description = "Builds all modules"
    dependsOn(subprojects.map { "${it.path}:build" })
}

// Task to build core components only
tasks.register("buildCore") {
    group = "build"
    description = "Builds core API and implementation"
    dependsOn(":api:build", ":core:build")
}
