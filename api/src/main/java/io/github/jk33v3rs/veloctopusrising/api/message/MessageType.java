package io.github.jk33v3rs.veloctopusrising.api.message;

/**
 * Classification of message types for appropriate handling and formatting.
 * 
 * <p>This enum categorizes messages by their purpose and content type,
 * allowing the translation engine to apply appropriate formatting,
 * routing, and processing rules for each message category.</p>
 * 
 * <p><strong>Thread Safety:</strong> Immutable enum - completely thread-safe.</p>
 * 
 * <p><strong>Performance Considerations:</strong> Used in high-frequency
 * message routing decisions. Enum comparisons are optimized by JVM.</p>
 * 
 * <h3>Usage Example:</h3>
 * <pre><code>
 * if (message.getType() == MessageType.MODERATION) {
 *     // Route to Security Bard for immediate action
 *     securityBard.handleModeration(message);
 * }
 * </code></pre>
 * 
 * <h3>Integration Points:</h3>
 * <ul>
 *   <li>VeloctopusMessage for message classification</li>
 *   <li>Discord bots for appropriate bot routing</li>
 *   <li>Message formatters for type-specific styling</li>
 *   <li>Priority queues for urgent message handling</li>
 * </ul>
 * 
 * @author VelocityCommAPI Development Team
 * @version 1.0.0
 * @since 1.0.0
 * @see VeloctopusMessage
 * @see MessageSource
 */
public enum MessageType {
    
    /**
     * Standard player chat messages.
     * 
     * <p>Regular conversation between players in global or channel chat.
     * These messages support rich formatting and are bridged across
     * all connected platforms.</p>
     * 
     * <h4>Characteristics:</h4>
     * <ul>
     *   <li>Normal priority processing</li>
     *   <li>Full rich text formatting support</li>
     *   <li>Cross-platform bridging enabled</li>
     *   <li>Rate limiting and spam protection applied</li>
     * </ul>
     */
    CHAT,
    
    /**
     * System notifications and announcements.
     * 
     * <p>Messages generated by the plugin system for notifications,
     * status updates, and administrative announcements. Often have
     * higher priority than regular chat messages.</p>
     * 
     * <h4>Characteristics:</h4>
     * <ul>
     *   <li>High priority processing</li>
     *   <li>System-wide distribution</li>
     *   <li>Distinctive formatting for visibility</li>
     *   <li>No rate limiting applied</li>
     * </ul>
     */
    SYSTEM,
    
    /**
     * Moderation and security-related messages.
     * 
     * <p>Messages related to bans, kicks, warnings, and other moderation
     * actions. These are routed to Security Bard and logged with full
     * audit trails for accountability.</p>
     * 
     * <h4>Characteristics:</h4>
     * <ul>
     *   <li>Critical priority processing</li>
     *   <li>Security Bard routing</li>
     *   <li>Comprehensive audit logging</li>
     *   <li>Immediate delivery required</li>
     * </ul>
     */
    MODERATION,
    
    /**
     * Achievement and celebration messages.
     * 
     * <p>Messages celebrating player achievements, rank promotions,
     * XP milestones, and community events. These are typically routed
     * to Flora for enthusiastic celebration formatting.</p>
     * 
     * <h4>Characteristics:</h4>
     * <ul>
     *   <li>Normal priority processing</li>
     *   <li>Flora bot routing for celebrations</li>
     *   <li>Rich embed formatting</li>
     *   <li>Positive, encouraging tone</li>
     * </ul>
     */
    ACHIEVEMENT,
    
    /**
     * Server status and monitoring messages.
     * 
     * <p>Messages about server uptime, player counts, performance metrics,
     * and connectivity status. Typically handled by May for efficient
     * status reporting.</p>
     * 
     * <h4>Characteristics:</h4>
     * <ul>
     *   <li>Low to normal priority</li>
     *   <li>May bot routing for status updates</li>
     *   <li>Structured data formatting</li>
     *   <li>Regular interval delivery</li>
     * </ul>
     */
    STATUS,
    
    /**
     * Educational and help content.
     * 
     * <p>Messages providing information, tutorials, help text, and
     * educational content. Routed to Librarian for knowledgeable
     * and helpful presentation.</p>
     * 
     * <h4>Characteristics:</h4>
     * <ul>
     *   <li>Normal priority processing</li>
     *   <li>Librarian bot routing</li>
     *   <li>Structured, informative formatting</li>
     *   <li>Context-aware responses</li>
     * </ul>
     */
    EDUCATIONAL,
    
    /**
     * Private or direct messages.
     * 
     * <p>One-to-one or small group private communications that should
     * not be broadcast to public channels. Handled with appropriate
     * privacy and routing considerations.</p>
     * 
     * <h4>Characteristics:</h4>
     * <ul>
     *   <li>High priority processing</li>
     *   <li>Private channel routing only</li>
     *   <li>Enhanced privacy protection</li>
     *   <li>Limited cross-platform bridging</li>
     * </ul>
     */
    PRIVATE,
    
    /**
     * Error and warning messages.
     * 
     * <p>Messages indicating errors, warnings, or exceptional conditions
     * that require attention. May be routed to appropriate administrative
     * channels or logged for review.</p>
     * 
     * <h4>Characteristics:</h4>
     * <ul>
     *   <li>High to critical priority</li>
     *   <li>Administrative channel routing</li>
     *   <li>Error-specific formatting</li>
     *   <li>Comprehensive logging required</li>
     * </ul>
     */
    ERROR;
    
    /**
     * Gets the default priority level for this message type.
     * 
     * <p>Returns the standard priority value used for messages of this type.
     * Higher values indicate higher priority and faster processing.</p>
     * 
     * @return default priority level for this message type
     * @since 1.0.0
     */
    public int getDefaultPriority() {
        return switch (this) {
            case MODERATION, ERROR -> VeloctopusMessage.Priority.CRITICAL;
            case SYSTEM, PRIVATE -> VeloctopusMessage.Priority.HIGH;
            case CHAT, ACHIEVEMENT, EDUCATIONAL -> VeloctopusMessage.Priority.NORMAL;
            case STATUS -> VeloctopusMessage.Priority.LOW;
        };
    }
    
    /**
     * Checks if this message type supports cross-platform bridging.
     * 
     * <p>Returns true if messages of this type should be automatically
     * bridged across all connected platforms. Some message types (like
     * private messages) may have restricted bridging.</p>
     * 
     * @return true if message type supports cross-platform bridging
     * @since 1.0.0
     */
    public boolean supportsCrossPlatformBridging() {
        return switch (this) {
            case CHAT, SYSTEM, ACHIEVEMENT, STATUS, EDUCATIONAL -> true;
            case MODERATION, PRIVATE, ERROR -> false;
        };
    }
    
    /**
     * Gets the recommended Discord bot for handling this message type.
     * 
     * <p>Returns the name of the Discord bot best suited to handle
     * messages of this type based on bot personalities and capabilities.</p>
     * 
     * @return recommended Discord bot name for this message type
     * @since 1.0.0
     */
    public String getRecommendedDiscordBot() {
        return switch (this) {
            case MODERATION, ERROR -> "security_bard";
            case ACHIEVEMENT -> "flora";
            case STATUS, CHAT -> "may";
            case EDUCATIONAL, SYSTEM, PRIVATE -> "librarian";
        };
    }
}
